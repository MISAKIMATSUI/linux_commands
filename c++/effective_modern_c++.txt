//
//
//std::initializer_list
//
//
//
//
//
//
//
//
//
1 型　推論　
通常の型推論では、実引数の参照性は無視される

constは値渡しの時に無視される

配列型とポインタ型は交換可能であるが　異なる型である　関数の仮引数として配列はありえない

関数は仮引数を真の配列とは宣言できないが、配列の参照としてなら、宣言できる
->配列の要素数を推論するテンプレートを書ける

関数のconstexprと宣言すると戻り値をコンパイル時に使用できる

colum const &を渡すと&がそぎ落とされたあと、const がそぎ落とされる(4項)

2項
autoをもちいた型推論ではautoがテンプレートのT 変数の型指定子がParamTypeの役割を果たす
	一点を除いてテンプレートと同じ
const char name[] = "aaa";
auto& test = name;// test type is cons char(&[N]);

auto x1 = 27;
auto x2(27);
auto x3 = { 27 };
auto x4{ 27 };

autoの型推論では波括弧で囲むと初期化子をstd::initializer_list を表すのに対して、テンプレートの型推論はinitiallizer_list想定しない
つまり　テンプレート中では明示的にstd::initializer_listとしなければエラー

3項

戻り値の後置　メリット　仮引数

decltypeはauto推論と違って参照性が無視されない　ほんとにまま

decltype(auto) 推論規則がdecltypeで推論する

4

int x = 0; 
std:: cout << typeid(x).name() << std::endl;

#include <boost/type_index.hpp>
using boost::typeindex::type_id_with_cvr;

type_id_with_cvr<T>().pretty_name();




5

auto は初期化必須


autoを使えば環境やコンパイラ依存のbitに対して煩わされることはない

関数の戻り値を保持する変数をautoにしておけば関数を修正することになったときに修正が関数だけで済む



6
auto　プロクシクラスと相性悪い

auto index = static_cast<int>(d); のようにすれば推測される型もわかって一石二兆


7 
c++ 関数宣言とみなせるものは関数宣言とみなす　デフォルトコンストラクタ　波括弧
 ->デフォルトコンストラクタは括弧つけないで呼ぶスタイルにしよう　p59

波括弧とautoは相性悪い　initializer_list


8
nullptr 利点　可読性　

NULL 0 0はこえまでもこれからも常にint(テンプレート使うとき困るね)


9
typedefよりusing template struct 
typedef typename using型名でなくてはいけない

10
前方宣言 enum class Status;
enum class Status 

11
アクセスさせさくない関数　private よりdelete な理由とは
delete 役に立つ場面　オーバーロード
delete 役に立つ場面　クラスのテンプレート

12
 オーバーライドに override つけるべき理由
メンバ関数　参照修飾子　とは
メンバ関数に　参照修飾子を付加　そのオーバーロードにも参照修飾子を付加しなければならない
culumun メンバ関数の末尾にconst はそのメンバ関数を実行するオブジェクト(*this)がconstであることを表している
右辺値参照　一時オブジェクト　左辺参照は左辺参照を返す

15
constexpr コンパイル時に既知の定数であることを概念的に表す　
constexprオブジェクト
	constexprオブジェクトはコンパイル時に値が決定されているものとして想定して気軽に利用していい
	constオブジェクトとconstexprオブジェクトとの違い
	ある変数をコンパイル時定数を必要とする場面でしよいう可能なことをコンパイラに保証してほしければconstではなくconstexpr
constexpr関数
constexpr関数はコンパイル時定数を与えられ呼び出されたときにコンパイル定数を返して
コンパイル時点では値が決められてなく　実行時まで未知な値を与えられたときに実行にのみ使用可能な値を返す

c++11 とc++14の時でconstexprの制約の違い void 一行

16
同期を必要とする変数やメモリ上に位置が1つの場合ｈがstd::atomicの使用がふさわしく,複数をまとめて1単位として扱いときはmutexがよい


17
生成された特殊メンバ関数は暗黙的にpublicかつinlineとなる
仮想デストラクタを持つ基底クラスを継承した派生クラスのデストラクタ以外は非仮想関数となる

新しく特殊メンバ関数追加された ムーブコンストラクタ　ムーブ代入演算子　非staticメンバ関数
ムーブの場合はコピー　代入どちらかが宣言されれば、他方は自動的に生成されない(= delete) 　 3関数同時ルール　デストラクタ
コンパイラが生成する関数の動作が正しいことを示唆する　= default

18
auto_ptrはc++98コンパイラを使用しない限りは非推奨である
shared_ptr サイズrawポインタの二倍　レファレンスカウントはアトミックに
インクリメントが常でない理由　ムーブセマンティクス
shared_ptr コントロールブロック リファレンスカウント
コントロールブロック作成規則 3 make_shared　所有権が一意なポインタ　rawポインタ
同じrawポインタからst::shared_ptrを複数作成すると対象オブジェクトがコントロールブロックを複数もつようになる
shard_ptrのコンストラクタにrawポインタを渡すのはだめ　make_shared newの結果を直接渡す
複数のコントロールブロックとなってしまいがちな想定外の動作はthisポインタも関係する enable_shared_from_this





