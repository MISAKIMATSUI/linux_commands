
4444444444444
動的に結合される関数のチェックは実行時に適切な関数が呼ばれるが
c++では動的に実行される関数のチェックはコンパイル時にしてしまうようになっている。

実行時のポリモーフィズムはポ　イ　ン　タ　か　参　照　を　通　し　て　仮　想　関　数がよばれたときのみに起こります。


stlのコンテナ類になぜsize()みたいに()が必要なのか　privateで変数が管理されていて関数でゲットしてきているからつまりgetLenghtということである

リソースが自動的に開放されるなら必ずしもデストラクタは必要ではない
さらにコンストラクタが動的にメモリを動的に確保していたら、同じ理由でコピーコンストラクタが必要
なぜなら単純にコピーすると同じオブジェクトをさすポインタが2つできてしまうからである 
もしコピーコンストラクタが必要なら同じ理由で代入演算子も必要である

c++の組み込みのdeleteは配列を開放するときその大きさを知らずにやるように作られた
(mallocを使うときに確保するサイズは決められるがそのサイズをc++のライブラリが見つけられるとは限らない
そのため配列の大きさが記録されオーバーヘッドができるがあまり問題ではない

もしメンバ関数がそのオブジェクトを変えるつもりがない(値を返すだけで変更しない)ならconstを関数につけるべき

444444444444444
555555555555555
何故ポインタなら　スライス問題を避けられるのか P54
Automobile x();
Vehiucle* parking_lot[10]
parking_lot[0] = &x;  // 問題の理由を述べよ

Automobile x();
parking_lot[0] = new Automobile(x); //解決　newを使った方がいい理由でもあるね


コンパイル時に型の分からないものをコピーする方法を考えよう
c++では型の分からないものになにかをしたいなら使うのは仮想関数である

代理クラス　メモリ管理　派生クラスを表ことができ、しかも基底クラスのようにふるまう
目的：型を正確には確定できないクラスのオブジェクトをコンテナに格納するために使われる



デフォルトの代入演算子とコピーコンストラクタはたいてい想定通りの動きをするので書き換える必要はない
特にデータメンバにポインタを持たないクラスは大抵そう
55555555555555555555
66666666666666666666
ハンドルクラス　代理クラスのような働きをしながら不要なコピーをしないクラス
ポインタを使用する方法もあるがオブジェクトを扱うより難しいのでポインタの危険性を回避しながら、ポインタの持つ利点を得たい
ではどうすればいいのか->クラスを作る(このようなクラスはスマートポインタと呼ばれる

ハンドルを初期化するにはどうしたらいいのか
->直接結びつけるのは良くない(直接結びつけるならハンドルは結びつけるオブジェクトの生成破棄に関与するべきではない)
	->以上からハンドルに結びつけらるオブジェクトを所有すべきである
	->方法としてはハンドルがコピーするかハンドルにオブジェクトを生成するためのデータを渡すか






